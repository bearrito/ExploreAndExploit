import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers
import probability_monad.Distribution



/**
 * Created with IntelliJ IDEA.
 * User: bearrito
 * Date: 7/13/13
 * Time: 10:47 AM
 * To change this template use File | Settings | File Templates.
 */

class TestExploitable(val numCalls : Int, val vara : Double, ev : Double, called : Boolean) extends Exploitable {
      def count()  : Int  =   this.numCalls
      def realizeReward() : Unit = ()
      def realizeRewards(n : Int) : Unit = ()
      def variance() : Double = this.vara
      def average() : Double = this.ev
      def calledOnce() : Boolean = this.called


}


class ExploitationSpecs extends FunSuite with ShouldMatchers {
  test("Average of a constant bandit is the constant "){
    val expectedReward = new FloatReward(5)
    implicit val alwaysDistro = Distribution.always(expectedReward)
    val alwaysBandit = new AlwaysBandit[Float,FloatReward]()
    val exploitationContainer = new NaiveExploitationContainer[Float,FloatReward](alwaysBandit)
    exploitationContainer.realizeRewards(10)
    exploitationContainer.average should be (5.0)

  }



  test("Variance of a constant bandit is the constant"){
    val expectedReward = new FloatReward(5)
    implicit val alwaysDistro = Distribution.always(expectedReward)
    val alwaysBandit = new AlwaysBandit[Float,FloatReward]()
    val actualRewards = alwaysBandit.rewards(10)
    val exploitationContainer = new NaiveExploitationContainer[Float,FloatReward](alwaysBandit)
    exploitationContainer.realizeRewards(10)
    val v = exploitationContainer.variance
    assert(exploitationContainer.variance == 0)


  }


  test("Beta of uncalled bandit is max double"){
    val exploitMe = new TestExploitable(0,1.0,0.0,false)
    assert( Exploiter.beta(exploitMe,0,1,1)  == Double.MaxValue)
  }


}


