import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers
import probability_monad.Distribution

/**
 * Created with IntelliJ IDEA.
 * User: bearrito
 * Date: 7/13/13
 * Time: 10:47 AM
 * To change this template use File | Settings | File Templates.
 */

class TestExploitable extends Exploitable {



}


class ExploitationSpecs extends FunSuite with ShouldMatchers {
  test("Average of a constant bandit is the constant "){

    val expectedReward = new FloatReward(5)
    implicit val alwaysDistro = Distribution.always(expectedReward)
    val alwaysBandit = new AlwaysBandit[Float,FloatReward]()
    val actualRewards = alwaysBandit.rewards(10)
    val exploitationContainer = new NaiveExploitationContainer[Float,FloatReward](alwaysBandit)
    exploitationContainer.realizeRewards(10)
    exploitationContainer.average should be (10.0)

  }

  test("Variance of a constant bandit is the constant "){
    val expectedReward = new FloatReward(5)
    implicit val alwaysDistro = Distribution.always(expectedReward)
    val alwaysBandit = new AlwaysBandit[Float,FloatReward]()
    val actualRewards = alwaysBandit.rewards(10)
    val exploitationContainer = new NaiveExploitationContainer[Float,FloatReward](alwaysBandit)
    exploitationContainer.realizeRewards(10)
    exploitationContainer.variance should be (0.0)
  }


  test("Beta of uncalled bandit is max double"){
    Exploiter.beta()


  }


}
