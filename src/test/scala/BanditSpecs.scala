/**
 * Created with IntelliJ IDEA.
 * User: bearrito
 * Date: 7/11/13
 * Time: 9:40 PM
 * To change this template use File | Settings | File Templates.
 */


import org.scalatest.matchers.ShouldMatchers
import probability_monad.Distribution



import org.scalatest._

class BanditSpecs extends FunSuite with ShouldMatchers{

  test("Verify alwaysBandit returns expected value") {
    val expectedReward = new FloatReward(0)
    implicit val alwaysDistro = Distribution.always(expectedReward)
    val alwaysBandit = new AlwaysBandit[Float,FloatReward]()
    val actualReward = alwaysBandit.reward()
    assert(expectedReward.computable == actualReward.computable)
  }

  test("Verify alwaysBandit returns samples of expected values"){
    val expectedReward = new FloatReward(0)
    implicit val alwaysDistro = Distribution.always(expectedReward)
    val expectedRewards = List.fill(10)(expectedReward)
    val alwaysBandit = new AlwaysBandit[Float,FloatReward]()
    val actualRewards = alwaysBandit.rewards(10)

    actualRewards should  have length(10)
    val nonExpectedRewards = actualRewards.filter(r => r.computable != expectedReward.computable)
    nonExpectedRewards should be ('empty)

  }

  test("Verify discrete stochastic bandit of one choice returns single value"){
    val expectedReward = new BooleanReward(false)
    val discreteDistro = Distribution.discrete(List(expectedReward -> 1.0))
    val expectedRewards = List.fill(10)(expectedReward)
    val alwaysBandit = new StochasticBandit[Boolean,BooleanReward](discreteDistro)
    val actualRewards = alwaysBandit.rewards(10)

    actualRewards should  have length(10)
    val nonExpectedRewards = actualRewards.filter(r => r.computable != expectedReward.computable)
    nonExpectedRewards should be ('empty)

  }






}
