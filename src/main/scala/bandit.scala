import probability_monad.Distribution

/**
 * Created with IntelliJ IDEA.
 * User: bearrito
 * Date: 7/11/13
 * Time: 9:16 PM
 * To change this template use File | Settings | File Templates.
 */







trait Reward[A] {
  def computable : Double
  def actual : A
}

trait Bandit[A,T <: Reward[A]] {

  def reward : T
  def rewards(n : Int) : Seq[T]

}

case class FloatReward(f : Float) extends  Reward[Float] {
    override def computable = f
    override def actual : Float = f
}

case class IntReward(i : Int) extends Reward[Int] {
    override  def computable = i
    override def actual : Int = i

}

case class BooleanReward(v : Boolean) extends Reward[Boolean]
{
  override def computable = v match {
    case true => 1.0
    case _ => 0.0

  }
  override def actual : Boolean = v

}

class AlwaysBandit[A, T <: Reward[A]](implicit val anAlwaysDistribution : Distribution[T])
  extends Bandit[A,T]{

    private val constantReward = this.anAlwaysDistribution.singleSample
    override def reward() : T = this.constantReward
    override def rewards(n:Int) : Seq[T] =  Seq.fill(n)(this.constantReward)
}


class StochasticBandit[A,T <: Reward[A]](val randomDistribution : Distribution[T])
  extends Bandit[A,T]{

    override def reward() : T = this.randomDistribution.singleSample
    override def rewards(n:Int) : Seq[T] = this.randomDistribution.sample(n)

}