/**
 * Created with IntelliJ IDEA.
 * User: bearrito
 * Date: 7/13/13
 * Time: 10:39 AM
 * To change this template use File | Settings | File Templates.
 */




trait Exploitable {
   def average : Double
   def variance : Double
   def count : Int
   def calledOnce : Boolean

   def realizeReward() : Unit
   def realizeRewards(n : Int) : Unit


}


trait ExploitableBandit[A,T <: Reward[A]] extends Exploitable{


  val bandit : Bandit[A, T ]
  protected var realizedRewards : Vector[Reward[A]]
  def average : Double = realizedRewards.map(r => r.computable).sum / realizedRewards.length
  def variance : Double = realizedRewards.map(r => (r.computable - average)*(r.computable -average)).sum / realizedRewards.length
  def count : Int = realizedRewards.length
}

class NaiveExploitationContainer[A,T <: Reward[A]](val bandit : Bandit[A,T]) extends ExploitableBandit[A,T]{
  protected var realizedRewards = Vector.empty[Reward[A]]
  private var _calledOnce = false
  override def calledOnce : Boolean = this._calledOnce

  override def realizeReward(): Unit = {
        this._calledOnce = true
        val gotten =    this.bandit.reward
        this.realizedRewards :+ gotten
  }
  override def realizeRewards(n : Int) : Unit = {
        this._calledOnce = true
        val gottens = this.bandit.rewards(n)
        this.realizedRewards ++ gottens
  }

}



object Exploiter{

  def logEpsilon(x : Int ) = math.log(x)

  def beta(e : Exploitable, iteration : Int,c : Float,b : Float, epsilon  : (Int => Double))  = {
    def shouldbeInfinite(pulls : Int, totalPulls : Int) : Boolean = {
      if( pulls == 0) return true
      if(totalPulls == 0) return true
      return false

    }

    shouldbeInfinite(e.count, iteration) match  {
      case true => {Double.MaxValue}
      case false => {
        e.average + math.sqrt((2 * e.variance * epsilon(iteration) / e.count)) + c*((3*b*epsilon(iteration))/e.count)
      }
    }
  }


}

